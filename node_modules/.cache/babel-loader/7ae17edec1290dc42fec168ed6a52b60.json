{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport api from '@/api';\nimport PxButton from '@/components/PxButton';\nexport default {\n  name: 'CoinDetail',\n  components: {\n    PxButton\n  },\n  data() {\n    return {\n      isLoading: false,\n      asset: {},\n      history: [],\n      markets: [],\n      fromUsd: true,\n      convertValue: null\n    };\n  },\n  computed: {\n    convertResult() {\n      if (!this.convertValue) {\n        return 0;\n      }\n      const result = this.fromUsd ? this.convertValue / this.asset.priceUsd : this.convertValue * this.asset.priceUsd;\n      return result.toFixed(4);\n    },\n    min() {\n      return Math.min(...this.history.map(h => parseFloat(h.priceUsd).toFixed(2)));\n    },\n    max() {\n      return Math.max(...this.history.map(h => parseFloat(h.priceUsd).toFixed(2)));\n    },\n    avg() {\n      return Math.abs(...this.history.map(h => parseFloat(h.priceUsd).toFixed(2)));\n    }\n  },\n  watch: {\n    $route() {\n      this.getCoin();\n    }\n  },\n  created() {\n    this.getCoin();\n  },\n  methods: {\n    toggleConverter() {\n      this.fromUsd = !this.fromUsd;\n    },\n    getWebSite(exchange) {\n      this.$set(exchange, 'isLoading', true);\n      return api.getExchange(exchange.exchangeId).then(res => {\n        this.$set(exchange, 'url', res.exchangeUrl);\n      }).finally(() => {\n        this.$set(exchange, 'isLoading', false);\n      });\n    },\n    getCoin() {\n      const id = this.$route.params.id;\n      this.isLoading = true;\n      Promise.all([api.getAsset(id), api.getAssetHistory(id), api.getMarkets(id)]).then(([asset, history, markets]) => {\n        this.asset = asset;\n        this.history = history;\n        this.markets = markets;\n      }).finally(() => this.isLoading = false);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AAEA;EACAA;EAEAC;IAAAC;EAAA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACAC;MACA;QACA;MACA;MAEA,8BACA,0CACA;MAEA;IACA;IAEAC;MACA,gBACA,4DACA;IACA;IAEAC;MACA,gBACA,4DACA;IACA;IAEAC;MACA,gBACA,4DACA;IACA;EACA;EAEAC;IACAC;MACA;IACA;EACA;EAEAC;IACA;EACA;EAEAC;IACAC;MACA;IACA;IAEAC;MACA;MAEA,WACAC,iCACAC;QACA;MACA,GACAC;QACA;MACA;IACA;IAEAC;MACA;MACA;MAEAC,aACAC,kBACAA,yBACAA,mBACA,EACAJ;QACA;QACA;QACA;MACA,GACAC;IACA;EACA;AACA","names":["name","components","PxButton","data","isLoading","asset","history","markets","fromUsd","convertValue","computed","convertResult","min","max","avg","watch","$route","created","methods","toggleConverter","getWebSite","getExchange","then","finally","getCoin","Promise","api"],"sourceRoot":"src/views","sources":["CoinDetail.vue"],"sourcesContent":["<template>\n  <div class=\"flex-col\">\n    <div class=\"flex justify-center\">\n      <bounce-loader :loading=\"isLoading\" :color=\"'#68d391'\" :size=\"100\" />\n    </div>\n    <template v-if=\"!isLoading\">\n      <div class=\"flex flex-col sm:flex-row justify-around items-center\">\n        <div class=\"flex flex-col items-center\">\n          <img\n            :src=\"\n              `https://static.coincap.io/assets/icons/${asset.symbol.toLowerCase()}@2x.png`\n            \"\n            :alt=\"asset.name\"\n            class=\"w-20 h-20 mr-5\"\n          />\n          <h1 class=\"text-5xl\">\n            {{ asset.name }}\n            <small class=\"sm:mr-2 text-gray-500\">{{ asset.symbol }}</small>\n          </h1>\n        </div>\n\n        <div class=\"my-10 flex flex-col\">\n          <ul>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Ranking</b>\n              <span>#{{ asset.rank }}</span>\n            </li>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Precio actual</b>\n              <span>{{ asset.priceUsd | dollar }}</span>\n            </li>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Precio más bajo</b>\n              <span>{{ min | dollar }}</span>\n            </li>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Precio más alto</b>\n              <span>{{ max | dollar }}</span>\n            </li>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Precio Promedio</b>\n              <span>{{ avg | dollar }}</span>\n            </li>\n            <li class=\"flex justify-between\">\n              <b class=\"text-gray-600 mr-10 uppercase\">Variación 24hs</b>\n              <span>{{ asset.changePercent24Hr | percent }}</span>\n            </li>\n          </ul>\n        </div>\n\n        <div class=\"my-10 sm:mt-0 flex flex-col justify-center text-center\">\n          <button\n            @click=\"toggleConverter\"\n            class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded\"\n          >{{ fromUsd ? `USD a ${asset.symbol}` : `${asset.symbol} a USD` }}</button>\n\n          <div class=\"flex flex-row my-5\">\n            <label class=\"w-full\" for=\"convertValue\">\n              <input\n                v-model=\"convertValue\"\n                id=\"convertValue\"\n                type=\"number\"\n                class=\"text-center bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal\"\n                :placeholder=\"`Valor en ${fromUsd ? 'USD' : asset.symbol}`\"\n              />\n            </label>\n          </div>\n\n          <span class=\"text-xl\">{{ convertResult }} {{ fromUsd ? asset.symbol : 'USD' }}</span>\n        </div>\n      </div>\n\n      <line-chart\n        class=\"my-10\"\n        :colors=\"['orange']\"\n        :min=\"min\"\n        :max=\"max\"\n        :data=\"history.map(h => [h.date, parseFloat(h.priceUsd).toFixed(2)])\"\n      />\n\n      <h3 class=\"text-xl my-10\">Mejores Ofertas de Cambio</h3>\n      <table>\n        <tr v-for=\"m in markets\" :key=\"`${m.exchangeId}-${m.priceUsd}`\" class=\"border-b\">\n          <td>\n            <b>{{ m.exchangeId }}</b>\n          </td>\n          <td>{{ m.priceUsd | dollar }}</td>\n          <td>{{ m.baseSymbol }} / {{ m.quoteSymbol }}</td>\n          <td>\n            <px-button\n              :is-loading=\"m.isLoading || false\"\n              v-if=\"!m.url\"\n              @custom-click=\"getWebSite(m)\"\n            >\n              <slot>Obtener Link</slot>\n            </px-button>\n            <a v-else class=\"hover:underline text-green-600\" target=\"_blanck\">{{ m.url }}</a>\n          </td>\n        </tr>\n      </table>\n    </template>\n  </div>\n</template>\n\n<script>\nimport api from '@/api'\nimport PxButton from '@/components/PxButton'\n\nexport default {\n  name: 'CoinDetail',\n\n  components: { PxButton },\n\n  data() {\n    return {\n      isLoading: false,\n      asset: {},\n      history: [],\n      markets: [],\n      fromUsd: true,\n      convertValue: null\n    }\n  },\n\n  computed: {\n    convertResult() {\n      if (!this.convertValue) {\n        return 0\n      }\n\n      const result = this.fromUsd\n        ? this.convertValue / this.asset.priceUsd\n        : this.convertValue * this.asset.priceUsd\n\n      return result.toFixed(4)\n    },\n\n    min() {\n      return Math.min(\n        ...this.history.map(h => parseFloat(h.priceUsd).toFixed(2))\n      )\n    },\n\n    max() {\n      return Math.max(\n        ...this.history.map(h => parseFloat(h.priceUsd).toFixed(2))\n      )\n    },\n\n    avg() {\n      return Math.abs(\n        ...this.history.map(h => parseFloat(h.priceUsd).toFixed(2))\n      )\n    }\n  },\n\n  watch: {\n    $route() {\n      this.getCoin()\n    }\n  },\n\n  created() {\n    this.getCoin()\n  },\n\n  methods: {\n    toggleConverter() {\n      this.fromUsd = !this.fromUsd\n    },\n\n    getWebSite(exchange) {\n      this.$set(exchange, 'isLoading', true)\n\n      return api\n        .getExchange(exchange.exchangeId)\n        .then(res => {\n          this.$set(exchange, 'url', res.exchangeUrl)\n        })\n        .finally(() => {\n          this.$set(exchange, 'isLoading', false)\n        })\n    },\n\n    getCoin() {\n      const id = this.$route.params.id\n      this.isLoading = true\n\n      Promise.all([\n        api.getAsset(id),\n        api.getAssetHistory(id),\n        api.getMarkets(id)\n      ])\n        .then(([asset, history, markets]) => {\n          this.asset = asset\n          this.history = history\n          this.markets = markets\n        })\n        .finally(() => (this.isLoading = false))\n    }\n  }\n}\n</script>\n\n<style scoped>\ntd {\n  padding: 10px;\n  text-align: center;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}